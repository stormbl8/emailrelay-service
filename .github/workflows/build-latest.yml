name: build-latest

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'               # Trigger on version tags like v1.2.3
    branches:
      - '*'                # Trigger on all branches
    paths-ignore:
      - LICENSE
      - docker-compose.yml

jobs:
  build-push-latest:
    runs-on: ubuntu-latest
    environment: docker-publish
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Set up QEMU for multi-platform builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Set version tag from the pushed GitHub tag
      - name: Set version tag
        id: meta
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ "$VERSION" == "$GITHUB_REF" ]]; then
            echo "This is not a tag, exiting..."
            exit 0
          fi
          echo "Tag version detected: $VERSION"
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

      # Build and push the Docker image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./image
          file: ./image/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=gha,ref=stormbl8/emailrelay
          cache-to: type=gha,ref=stormbl8/emailrelay,mode=max
          tags: |
            stormbl8/emailrelay:latest
            ${{ steps.meta.outputs.tag && format('stormbl8/emailrelay:{0}', steps.meta.outputs.tag) || '' }}

      # List files for debugging (ensure CHANGELOG.md exists)
      - name: List files
        run: |
          ls -alh

      # Fetch release notes from CHANGELOG.md
      - name: Extract changelog entry for this version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ "$VERSION" == "$GITHUB_REF" ]]; then
            echo "This is not a tag, exiting..."
            exit 0
          fi
          echo "Looking for changelog entry for version $VERSION"

          # Extract the changelog entry for the version from docs/CHANGELOG.md
          RELEASE_NOTES=$(awk -v version="$VERSION" '/## \['"$version"'\]/ {flag=1; next} flag && /^##/ {flag=0} flag {print}' docs/CHANGELOG.md)

          echo "Release notes for $VERSION:"
          echo "$RELEASE_NOTES"

          # Store the release notes in GitHub environment variable for use in later steps
          echo "release_notes<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Update the DockerHub repository description with the release notes
      - name: Update DockerHub repo description
        if: github.ref == 'refs/heads/main'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: stormbl8/emailrelay

      # Create GitHub Release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
